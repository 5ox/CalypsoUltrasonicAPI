Build1=Light,com.calypsoinstruments.CalypsoUltrasonicAPI,Light,NoAds
Build2=New_1,com.calypsoinstruments.CalysoUltrasonicAPI
File1=actBleActivity.bal
File10=ultra.jpg
File2=actcalcomp.bal
File3=api_icon.png
File4=bt.png
File5=calibration_ultrasonic.png
File6=calypso_drawer.jpg
File7=connection.png
File8=MainActivity.bal
File9=textura_fibra_carbono.jpg
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
IconFile=
Library1=core
Library2=gps
Library3=phone
Library4=ble2
Library5=byteconverter
Library6=javaobject
Library7=runtimepermissions
Library8=preferenceactivity
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="22" android:targetSdkVersion="27"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.DarkTheme)~\n~~\n~AddApplicationText(<activity android:name="anywheresoftware.b4a.objects.preferenceactivity"/>)~\n~~\n~' Permissions~\n~AddPermission(android.permission.ACCESS_NETWORK_STATE)~\n~AddPermission(android.permission.ACCESS_COARSE_LOCATION) 'no necesaria si no BluetoothAdmin~\n~AddPermission(android.permission.ACCESS_FINE_LOCATION)~\n~AddPermission(android.permission.BLUETOOTH)~\n~AddPermission(android.permission.BLUETOOTH_ADMIN)~\n~AddPermission(android.permission.WRITE_EXTERNAL_STORAGE)~\n~AddPermission(android.permission.RECEIVE_ULTRASONIC_API)~\n~~\n~'End of default text.~\n~
Module1=Starter
Module2=BackgroundService
Module3=actBLE
Module4=ComputationTools
Module5=actCalibration
NumberOfFiles=10
NumberOfLibraries=8
NumberOfModules=5
Version=8.3
@EndOfDesignText@
'--------------------------------------------------------------------------------------------------
' Main Activity (initial Activity launched upon program start)
' 
' API for the Calypso Ultrasonic Anemometer
' Calibrate the on-board compass
' Interface to 3rd party Apps using Broadcast Intents / Broadcast Receivers
'
' Bearing data priotities: 1. GPS bearing
'                          2. Ultrasonic Anemometer (when properly calibrated)
'                          3. Phone magnetic compass (must be aligned with tick mark on Anemometer, set Preference Phone Compass True)
' If GPS bearing is valid and GPS speed is > 1 kt, we use the GPS bearing as Compass
' If GPS bearing is not available, we use the Anemometer eCompass data unless the User has Enabled the Phone Compass data utilization
'
' This App interprets all speed data in m/s and all directional data as True North. The broadcast directional
' data can be True North or Magnetic North based on User Preference settings.  Speed data broadcast in m/s. 
'
' Implementation of 'Init_Phone_Compass' in Starter yields identical results to the algorithm described by Erel at
' https://www.b4x.com/android/forum/threads/orientation-and-accelerometer.6647/page-6.  As this is easier, we use this method
'
' Developed by Volker Petersen (volker.petersen01@gmail.com)
' July 2018
' -------------------------------------------------------------------------------------------------
'
' TODO implement calibration with Excel test to confirm
' TODO calibration as 2 step process. Step 1: calibrate compass, Step 2: calibrate device mount by
'      taking the difference between boat compass and device compass. That become the 'offsetAngle'.
'      make a reset activity and a calibration activity
'
' TODO implement RichString library to get Superscript letters 
'
' to set App icon, select a file from /Files folder in Project->Choose Icon - file can have any name. 
' In Manifest add line 'SetApplicationAttribute(android:icon, "@drawable/icon")'.  This IDE will copy
' the file you chose in Project->Choose Icon to "/Objects/res/drawable/icon.png" so that the compiler
' will find it.

#Region  Project Attributes 
	#ApplicationLabel: Calypso Ultrasonic API
	#VersionCode: 1
	#VersionName: ver 1.0
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger: True
#End Region
'#Extends: android.support.v7.app.AppCompatActivity

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Public uiTimer As Timer
	Public uiUpdateFrequency As Int = 1000
	Public yes As String = "Yes"
	Public no As String = "No"
	Dim portrait As Boolean

End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	Private btnCONNECT As Button
	Private lblAWA As Label
	Private lblCOG As Label
	Private lblAWS As Label
	Private lblBATTERY As Label
	Private lblConnectionStatus As Label
	Private lblTEMP As Label
	Private lblROLL As Label
	Private lblPITCH As Label
	Private lblCOMP As Label
	Private lblLOCATION As Label
	Private lblBROADCASTS As Label
End Sub

Sub Activity_Create(FirstTime As Boolean)
	'Do not forget to load the layout file created with the visual designer. For example:
	Activity.LoadLayout("MainActivity")

	'---------------------------------------------------------------------------------
	'ActionBar Menu       Title         Event
	Activity.AddMenuItem("Preferences","Preferences") 'top
	Activity.AddMenuItem("Bluetooth Scan","Bluetooth") 'middle
	Activity.AddMenuItem("Compass Calibration","Calibration") 'middle
	Activity.AddMenuItem("Anemometer Reset","Reset") 'middle
	Activity.AddMenuItem("About this App","About") 'middle
	Activity.AddMenuItem("Exit App","Exit") 'bottom
		
	If FirstTime Then
		Create_User_Preference_Screen
		Starter.javaInline.InitializeContext
	End If
			
	btnCONNECT.Tag = "Scan"
	btnCONNECT.Text = "Scan for BLE"
	lblBROADCASTS.Text = " "
End Sub

Sub Activity_Resume	
	Get_Current_Preference_Settings(False)			' fetch the lastest User Preference settings
	
	If Activity.Width > Activity.Height Then		' check if Phone is in Landscape or Portrait mode
		portrait = False
	Else
		portrait = True
	End If

	'Starter.calcTools.test							' Kalman and Lowpass Filter testing completed

	' make sure Location Services are running
	If Starter.activeGPS = False Then
		Starter.localDeclination = 999.0			' force an update of the declination data
		Location_Services_Start
	Else
		Starter.rp.CheckAndRequest(Starter.rp.PERMISSION_ACCESS_FINE_LOCATION)
		Wait For Activity_PermissionResult(Permission As String, Result As Boolean)
		If Result Then CallSubDelayed(Starter, "StartGPS")
	End If
	
	' make sure BLE is not running before we start the the BLE service again 
	If Starter.bleEnabled = False Then
		Bluetooth_Services_Start
	End If
	lblConnectionStatus.Text = Starter.bleStateText
	
	If Starter.bleConnected Then
		btnCONNECT.Text = "Stop BLE"
		btnCONNECT.Tag = "Stop"
	Else
		btnCONNECT.Text = "Scan for BLE"
		btnCONNECT.Tag = "Scan"
	End If
			
	' now start our Background Service (this function ensures that we always get restart the Service at any time)
	Launch_Background_Services
	
	' start the UI update timer with execution (clicks) every 'uiUpdateFrequency' milliseconds
	uiTimer.Initialize("uiUpdate", uiUpdateFrequency)
	uiTimer.Enabled=True
End Sub


Sub Activity_Pause (UserClosed As Boolean)
	' stop the BLE Scan timeout timer
	Starter.bleScanTimeout.Enabled = False

	' stop the uiTimer for the uiUpdate
	uiTimer.Enabled = False
	
	Log("User Closed: "&UserClosed)
	If UserClosed Then
		StopService(BackgroundService)
		Starter.runBackgroundTasks = False	' the background services stops when this Boolean is False
		CallSub(Starter, "Service_Destroy")
		Activity.Finish 					' and kill our APP.
		ExitApplication
	End If
End Sub


Sub Activity_KeyPress (KeyCode As Int) As Boolean
	' function to catch the back key and only exit the app when the user confirms this
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		Dim question As String = "Do you really want to exit this App and shutdown the datafeed from the Anemometer?"
		Dim title As String = "Exit App?"
	
		If Confirm_Dialog(question, title, yes, no) Then
			Activity.Finish 					' and kill our APP.
			Return False					' this will yield a UserClosed=True in Activity_Pause
		Else
			Return True						' this will yield a UserClosed=False in Activity_Pause
		End If
	End If
	Return True
End Sub


Sub Launch_Background_Services
	If Starter.bleConnected Then
		Starter.runBackgroundTasks = True	' the background services runs until this Boolean is False
		StartService(BackgroundService)		' start Background Service for this App
		btnCONNECT.Text = "BLE Stop"
		'Log("Main->Launch_Background_Services(): Background Services with Bluetooth status: " & Starter.bleManager.State)
	End If	
	'Log("Main->Launch_Background_Services(): pref Mac: "&Starter.prefBluetoothMAC)

	' start the UI update timer with execution (clicks) every 'uiUpdateFrequency' milliseconds
	uiTimer.Initialize("uiUpdate", uiUpdateFrequency)
	uiTimer.Enabled=True
	update_UI
End Sub


Sub update_UI
	Dim str, tmp As String
	Dim compass, heading As Float
	
	lblAWA.Text = NumberFormat(Starter.sensorDataProcessed.Get("AWA"), 3, 0) & "º"
	lblAWS.Text = NumberFormat2(Starter.sensorDataProcessed.Get("AWS")*Starter.speedToKnots, 1, 1, 1, False)
	lblROLL.Text = NumberFormat(Starter.sensorDataProcessed.Get("Pitch"), 3, 0) & "º"
	lblPITCH.Text = NumberFormat(Starter.sensorDataProcessed.Get("Roll"), 3, 0) & "º"
	lblBATTERY.Text = NumberFormat(Starter.sensorDataProcessed.Get("Battery"), 1, 0) & "%"
	lblTEMP.Text = NumberFormat2(Starter.sensorDataProcessed.Get("Temp"), 1, 1, 1, False) & "ºC"
	lblConnectionStatus.Text = Starter.bleStateText
	
	If Starter.prefTrueNorth Then
		compass = Starter.sensorDataProcessed.Get("Compass")
		heading = Starter.sensorDataProcessed.Get("COG")
		tmp = "ºT"
	Else
		compass = Starter.calcTools.TrueToMagneticNorth(Starter.sensorDataProcessed.Get("Compass"))
		heading = Starter.calcTools.TrueToMagneticNorth(Starter.sensorDataProcessed.Get("COG"))
		tmp = "ºM"
	End If
	lblCOMP.Text = NumberFormat(compass, 3, 0) & tmp
	lblCOG.Text = NumberFormat(heading, 3, 0) & tmp

	
	If Starter.ctr_ble > 1 Then
		str = Starter.ctr_ble & " API data transmissions (speeds in m/s, angles in "
		If Starter.prefTrueNorth Then
			str = str & "True North)"
		Else
			str = str & "Magnetic North)"
		End If
		lblBROADCASTS.Text = str
	End If
	If Starter.activeGPS Then
		tmp = Starter.gpsLocation.ConvertToMinutes(Starter.sensorData.Get("LAT"))
		str = "Lat: " & tmp.SubString2(0, tmp.Length-2)
		tmp = Starter.gpsLocation.ConvertToMinutes(Starter.sensorData.Get("LON"))
		str = str & "   Lon: " & tmp.SubString2(0, tmp.Length-2)
	End If

	If Starter.validBearing Then
		compass = heading
	Else
		compass = Starter.phoneCompass
		If Starter.prefTrueNorth = False Then compass = Starter.calcTools.TrueToMagneticNorth(compass)
	End If
	
	str = str & "   Hdg: " & NumberFormat(compass, 3, 0) & "º"

	If ( Abs(Starter.sensorData.Get("DECL")) > Starter.calcTools.precission ) Then
		str = str & "   δ: " & NumberFormat(Starter.sensorData.Get("DECL"), 1, 1) & "º"
	End If
	lblLOCATION.Text = str
End Sub


' uiTimer Event that get's executed every 'uiUpdateFrequency' miliseconds - see uiTimer.Initialize()
Sub uiUpdate_Tick
	update_UI
End Sub


' Layout Button click even
Sub btnCONNECT_Click
	Log("Main->btnCONNECT_Click(): " & btnCONNECT.Tag)

	If btnCONNECT.Tag = "Scan" Then
		btnCONNECT.Text = "Scanning...."
		CallSubDelayed(Starter, "BLE_Scan")
	Else
		Dim question As String = "Do you really want to shutdown the datafeed from the Anemometer?"
		Dim title As String = "Disconnect Bluetooth?"
	
		If Confirm_Dialog(question, title, yes, no) Then
			Starter.bleManager.Disconnect
			Starter.bleConnected = False
			Disconnect_Bluetooth
			btnCONNECT.Text = "Scan for BLE"
			' Stop our Background Service
			Starter.runBackgroundTasks = False	' stop the background services
		End If
	End If
	btnCONNECT.Invalidate
End Sub


Sub Connecting_Bluetooth
	btnCONNECT.Enabled = True
	Starter.bleStateText = "Connecting to " & Starter.connectedDevice.MacAddress
	lblConnectionStatus.Text = Starter.bleStateText
	btnCONNECT.Invalidate
	btnCONNECT.Text = "Connecting..."
	btnCONNECT.Tag = "Stop"
End Sub


Sub Disconnect_Bluetooth
	btnCONNECT.Enabled = True
	Starter.bleStateText = "Disconnected"
	lblConnectionStatus.Text = Starter.bleStateText
	btnCONNECT.Invalidate
	btnCONNECT.Text = "Scan & Connect BLE"
	btnCONNECT.Tag = "Scan"
End Sub


Sub Bluetooth_Services_Start
	'---------------------------------------------------------------------------------
	' Check the status of the Bluetooth device and power on as necessary
	
	If Starter.bleManager.State = Starter.bleManager.STATE_POWERED_ON Then 		 'BLE is powered on
		Log("Main->Bluetooth_Services_Start(): Bluetooth is powered on. Starting Scan....")
		Starter.bleEnabled = True
		
	Else If Starter.bleManager.State = Starter.bleManager.STATE_POWERED_OFF Then 'BLE is powered off

		Dim question As String = "Bluetooth is disabled. Do you want to enable it?"
		Dim title As String = "Bluetooth devise status"
		If Confirm_Dialog(question, title, yes, no) Then
			#if B4A
				Starter.bleEnabled = Starter.javaInline.RunMethod("setBluetooth", Null)
			Log("Main->Bluetooth_Services_Start(): Power on suceeded: " & Starter.bleEnabled)
			#end if
		Else
			Msgbox("Some App functions will not be available.", "Bluetooth warning")
			Starter.bleEnabled = False
			Log("Main->Bluetooth_Services_Start(): User declined to Bluetooth device on.")
		End If
		
	Else														 ' BLE is not supported
		Msgbox("Sorry, but it looks as if Bluetooth is not available on this device. Some App functions will not be available.", "Bluetooth Unavailable Error")
		Starter.bleEnabled = False
		Log("Main->Bluetooth_Services_Start(): No Bluetooth device found on this device.")
	End If

	If Starter.bleEnabled Then
		Starter.bleStateText = "BLE power on."
		lblConnectionStatus.Text = Starter.bleStateText
	Else
		Starter.bleStateText = "BLE is powered off!"
		lblConnectionStatus.Text = Starter.bleStateText
	End If
	
End Sub


Sub Location_Services_Start
	Dim question As String = "Location service is disabled. Do you want to enable it?"
	Dim title As String = "Location Services"
	If Confirm_Dialog(question, title, yes, no) Then
		StartActivity(Starter.gpsManager.LocationSettingsIntent)  ' will open the appropiate screen on device
		Starter.activeGPS = Starter.gpsManager.GPSEnabled
		Log("Main->Location_Services_Start(): activeGPS " & Starter.activeGPS)
	Else
		Msgbox("Please enable Location Services so that this App can compute TWA, TWD, & TWS", "Location Services")
	End If
End Sub



'---------------------------------------------------------------------------------
' ActionBar Menu options click actions

Sub Preferences_Click
	'Log("Main->Preferences_Click(): Calling the Preference Intent now...")
	StartActivity(Starter.prefScreen.CreateIntent)
End Sub


Sub Bluetooth_Click
	' force a full Bluetooth connection process (Power on, Scan, Connect)
	Log("Main->Bluetooth_Click(): " & btnCONNECT.Tag)
	Bluetooth_Services_Start
End Sub



Sub Calibration_Click
	' Resumable Sub because of the 'Wait For' call...
	If (Starter.bleConnected = False) And (Starter.cCalComp.StartsWith( "0000a00b" ) = False) Then
		Confirm_Dialog("Anemometer not yet connected via Bluetooth. Connect before running the Calibration process.", _
					   "Calibration Process", "OK", "")
		Return
	End If
	
	' make sure we have the propper User Permission to write calibation data to file
	Starter.rp.CheckAndRequest(Starter.rp.PERMISSION_WRITE_EXTERNAL_STORAGE)
	Wait For Activity_PermissionResult(Permission As String, Result As Boolean)

	If (Result=False) Or (File.ExternalWritable=False) Then
		Confirm_Dialog("Cannot write to the default storage location. Missing User permission. Can not start the Calibration process", "Storage Access Error", "OK", "")
		Return
	End If

	StartActivity(actCalibration)

End Sub


Sub Reset_Click
	Dim answer As Boolean
	Dim bc As ByteConverter
	If (Starter.bleConnected = False) And (Starter.cReset.StartsWith( "0000a00a" ) = False) Then
		answer = Confirm_Dialog("Anemometer not yet connected via Bluetooth. Connect before running the Reset process.", _
					   "Anemometer Reset", "OK", "")
	Else
		Log("Main->Reset_Click() - Service ID: "&Starter.anemometerServiceID&" reset UUID: "&Starter.cReset)
		answer = Confirm_Dialog("Do you really want to reset the Anemometer. The process will take up to 3 minutes?", _
					   "Anemometer Reset", "Yes", "No")
		If answer Then
			bc.LittleEndian = True
			Starter.bleManager.WriteData(Starter.anemometerServiceID, Starter.cReset, bc.HexToBytes( "01" ))
			Starter.bleConnected = False
			btnCONNECT.Text = "Scan"
		End If
	End If
End Sub
	

Sub About_Click
	Dim str As String
	Dim feedback As Int
	Dim i As Intent
	str = "This API app establishes a Bluetooth connection to the Calypso Ultrasonic Anemometer"
	str = str & " and broadcasts a data stream via Intents to other Apps. 3rd party App should utilize"
	str = str & " Broadcast Receivers to receive the data stream. "
	str = str & "Please click 'Help' to get more information from the App's webpage."
	feedback = Msgbox2(str, "About the App", "Help", "", "OK", Starter.appIcon)
	
	If feedback = DialogResponse.POSITIVE Then
		i.Initialize(i.ACTION_VIEW, "https://calypsoinstruments.com/")
		StartActivity(i)
	End If
End Sub

Sub Exit_Click
	Activity_KeyPress(KeyCodes.KEYCODE_BACK)
End Sub


Sub Confirm_Dialog(question As String, title As String, positive As String, negative As String) As Boolean
	Dim feedback As Int
	'Log("Main->Confirm_APP_Exit(): " & question)
	feedback = Msgbox2( question, title, positive, "", negative, Starter.appIcon )
	'Log("feedback="&feedback&"  ="&DialogResponse.POSITIVE&"   "&(feedback = DialogResponse.POSITIVE))
	Return (feedback = DialogResponse.POSITIVE)
End Sub


'---------------------------------------------------------------------------------
' User preference settings: screen / defaults / updates

Sub Create_User_Preference_Screen
	Log("Main->Create_User_Preference_Screen(): Creating the User Preferences Screen for the first time...")
	Starter.prefScreen.Initialize("App Settings", "")
	
	'create two categories
	Dim cat1, cat2 As PreferenceCategory
	cat1.Initialize("Software Parameters")
	cat1.AddCheckBox("TrueNorth", "Direction Data", "Display direction data as True North (on) or Magnetic North (off)", False)
	cat1.AddCheckBox("PhoneCompass", "Utilize Phone Compass", "Utilize Phone Compass instead of the Anemometer build-in compass (phone must be aligned with tick mark on the Anemometer!).", False)
	cat1.AddList("SampleRate", "Sample Rate", "The higher the frequency, the higher the power consumption.", _
        "4 samples/second", Array As String("1 sample/second", "4 samples/second", "8 samples/second"))
	'cat1.AddCheckBox("Smoothing", "Data Smoothing", "Smooth the instrument data (on/off)", True)
	cat1.AddList("SmoothingFactor", "Data Smoothing", "Select the data smoothing factor.", _
	"75%", Array As String("No Smoothing", "25%", "50%", "75%", "Max Smoothing"))

	cat2.Initialize("Other")
	cat2.AddEditText("bleName", "Anemometer Name", "You can rename your Anemometer and save it for furture connections.", Starter.defaultSensorName)
	cat2.AddCheckBox("ErrReporting", "Error Reporting", "Allow App to send Crash reports (on/off).", False)
		
	'add the categories to the main prefScreen
	Starter.prefScreen.AddPreferenceCategory(cat1)
	Starter.prefScreen.AddPreferenceCategory(cat2)
	
	' initialize the preference values with the Defaults if they have not been initialized
	If Starter.prefManager.GetAll.Size = 0 Then Set_Default_User_Preferences
End Sub


Sub Set_Default_User_Preferences
	'defaults are only set on the first run.
	Starter.prefManager.SetString("SampleRate", "4 samples/second")
	Starter.prefManager.SetString("SmoothingFactor", "75%")
	Starter.prefManager.SetBoolean("ErrReporting", False)
	Starter.prefManager.SetBoolean("TrueNorth", True)
	Starter.prefManager.SetString("bleName", Starter.defaultSensorName)
	Starter.prefManager.SetString("bleMAC", Starter.invalidMAC)
	Starter.prefManager.SetBoolean("PhoneCompass", False)
End Sub


Sub Get_Current_Preference_Settings(verbose As Boolean)
	Select Starter.prefManager.GetString("SampleRate")
		Case "1 sample/second"
			Starter.prefSampleRate = 1
		Case "4 samples/second"
			Starter.prefSampleRate = 4
		Case "8 samples/second"
			Starter.prefSampleRate = 8
		Case Else
			Starter.prefSampleRate = 4
	End Select
	Select Starter.prefManager.GetString("SmoothingFactor")
		Case "No Smoothing"
			Starter.prefSmoothing = 1.0
		Case "25%"
			Starter.prefSmoothing = 0.45
		Case "50%"
			Starter.prefSmoothing = 0.35
		Case "75%"
			Starter.prefSmoothing = 0.25
		Case "Max Smoothing"
			Starter.prefSmoothing = 0.15
		Case Else
			Starter.prefSmoothing = 0.25
	End Select
	Starter.prefErrReporting = Starter.prefManager.GetBoolean("ErrReporting")
	Starter.prefTrueNorth = Starter.prefManager.GetBoolean("TrueNorth")
	Starter.prefPhoneCompass = Starter.prefManager.GetBoolean("PhoneCompass")
	
	If (Starter.prefManager.GetString("bleMAC") = Starter.invalidMAC) Then
		Starter.prefBluetoothName = Starter.defaultSensorName
		Starter.prefBluetoothMAC = Starter.invalidMAC
	Else
		Starter.prefBluetoothName = Starter.prefManager.GetString("bleName")
		Starter.prefBluetoothMAC = Starter.prefManager.GetString("bleMAC").Replace("-", "")
	End If
	
	Starter.calcTools.Initialize
	
	If Starter.prefPhoneCompass Then
		' if User wants to utilize phone compass, initialize the service.
		CallSub(Starter, "Init_Phone_Compass")
	Else
		Starter.phoneSensors.StopListening
	End If
	
	If verbose Then
		Log("Main->Get_Current_Preference_Settings(): Sample Rate:   "&Starter.prefSampleRate)
		Log("Main->Get_Current_Preference_Settings(): Smoothing Fac: "&Starter.prefSmoothing)
		Log("Main->Get_Current_Preference_Settings(): Err Report :   "&Starter.prefErrReporting)
		Log("Main->Get_Current_Preference_Settings(): True North:    "&Starter.prefTrueNorth)
		Log("Main->Get_Current_Preference_Settings(): Phone Compass: "&Starter.prefPhoneCompass)
		Log("Main->Get_Current_Preference_Settings(): Mac Name:      "&Starter.prefBluetoothName)
		Log("Main->Get_Current_Preference_Settings(): Mac Add:       "&Starter.prefBluetoothMAC)
	End If
End Sub


'=================================START OF JAVA CODE================================
#If JAVA
public boolean setBluetooth() {
    android.bluetooth.BluetoothAdapter bluetoothAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter();
    boolean isEnabled = bluetoothAdapter.isEnabled();

    if (!isEnabled) {
        return bluetoothAdapter.enable();
    }
    // No need To change bluetooth state
    return true;
}

// confirmation sprint i1437327141

public float getDeclinationJava(double Lat, double Lon, double Altitude, long Millis) {
	import android.hardware.GeomagneticField;
	GeomagneticField mGeoField = new GeomagneticField((float)Lat, (float)Lon, (float)Altitude, Millis);
    return mGeoField.getDeclination();	
}
#End If
'=================================END OF JAVA CODE==================================
